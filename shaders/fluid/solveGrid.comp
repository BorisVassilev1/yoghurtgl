
layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

#include <fluid.glsl>

layout(rgba32f, binding = 0) uniform image3D volume;

vec4 readVoxel(ivec3 coord) {
	if(any(lessThan(coord, ivec3(0))) || any(greaterThanEqual(coord, ivec3(20, 20, 20))))
		return vec4(0.0);
	return imageLoad(volume, coord);
}

bool isWall(ivec3 coord) {
	return any(lessThan(coord, ivec3(0))) || any(greaterThanEqual(coord, ivec3(20, 20, 20)));
}

ivec3 directions[] = {
	ivec3(-1, 0, 0),
	ivec3(0, -1, 0),
	ivec3(0, 0, -1),
	ivec3(1, 0, 0),
	ivec3(0, 1, 0),
	ivec3(0, 0, 1),
};

int surroundWalls(ivec3 coord) {
	int s = 0;
	for(int i = 0; i < 6; i++) {
		if(!isWall(coord + directions[i]))
			++s;
	}
	return s;
}

void main() {
	uvec3 invID = gl_GlobalInvocationID;


	vec4 p111 = readVoxel(ivec3(invID) + ivec3(0, 0, 0));
	if(p111.w < 0.01) {
		return;
	}

	vec4 p211 = readVoxel(ivec3(invID) + ivec3(1, 0, 0));
	vec4 p121 = readVoxel(ivec3(invID) + ivec3(0, 1, 0));
	vec4 p112 = readVoxel(ivec3(invID) + ivec3(0, 0, 1));

	vec4 p011 = readVoxel(ivec3(invID) + ivec3(-1, 0, 0));
	vec4 p101 = readVoxel(ivec3(invID) + ivec3(0, -1, 0));
	vec4 p110 = readVoxel(ivec3(invID) + ivec3(0, 0, -1));
	
	vec4 p012 = readVoxel(ivec3(invID) + ivec3(-1, 0, 1));
	vec4 p021 = readVoxel(ivec3(invID) + ivec3(-1, 1, 0));
	vec4 p102 = readVoxel(ivec3(invID) + ivec3(0, -1, 1));
	vec4 p201 = readVoxel(ivec3(invID) + ivec3(1, -1, 0));
	vec4 p120 = readVoxel(ivec3(invID) + ivec3(0, 1, -1));
	vec4 p210 = readVoxel(ivec3(invID) + ivec3(1, 0, -1));

	for(int i = 0; i < 3; i++) {
		if(isWall(ivec3(invID) + directions[i]))
			p111[i] = 0.0;
	}

	float d111 = p211.x + p121.y + p112.z - p111.x - p111.y - p111.z;
	float d011 = p111.x + p021.y + p012.z - p011.x - p011.y - p011.z;
	float d101 = p201.x + p111.y + p102.z - p101.x - p101.y - p101.z;
	float d110 = p210.x + p120.y + p111.z - p110.x - p110.y - p110.z;
	
	int S111 = surroundWalls(ivec3(invID) + ivec3(0, 0, 0));
	int S011 = surroundWalls(ivec3(invID) + ivec3(-1, 0, 0));
	int S101 = surroundWalls(ivec3(invID) + ivec3(0, -1, 0));
	int S110 = surroundWalls(ivec3(invID) + ivec3(0, 0, -1));
	
	int s111 = int(isWall(ivec3(invID) + ivec3(0, 0, 0)));
	int s011 = int(isWall(ivec3(invID) + ivec3(-1, 0, 0)));
	int s101 = int(isWall(ivec3(invID) + ivec3(0, -1, 0)));
	int s110 = int(isWall(ivec3(invID) + ivec3(0, 0, -1)));
	
	float c = 0.1f;
	p111.xyz += vec3(d111) * vec3(s011, s101, s110) / vec3(S111) * c;
	p111.x -= d011 * float(s111) / float(S011) * c;
	p111.y -= d101 * float(s111) / float(S101) * c;
	p111.z -= d110 * float(s111) / float(S110) * c;
	
	//float coef = 1.f / 8.f;

	//imageStore(volume, ivec3(invID), p111);
}
