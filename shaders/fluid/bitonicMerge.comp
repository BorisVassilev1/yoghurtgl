layout(local_size_x = 128) in;

layout(std430, binding = 0) coherent restrict buffer Buffer {
	uint data[];
};

layout(binding = 5) uniform StepData {
	uint stepData[1024];
};

uniform uint N;
uniform uint I;

uniform uint elementSize = 1; 
uniform uint keyOffset = 0;

void swap(inout float a, inout float b) {
	float temp = a;
	a = b;
	b = temp;
}

void swap(inout uint a, inout uint b) {
	uint temp = a;
	a = b;
	b = temp;
}

void main() {
	uvec3 invID = gl_GlobalInvocationID;

	uint i = invID.x;

	uint subGroupSize = stepData[2 * I];
	uint stepSize = stepData[2 * I + 1];

	uint groupDirection = (i / subGroupSize) % 2;

	uint g0 = i / subGroupSize;
	uint i0 = i % subGroupSize;
	uint g1 = i0 / stepSize;
	uint i1 = i0 % stepSize;

	uint baseIndex = g0 * subGroupSize*2 + g1 * stepSize*2 + i1;

	uint indexLow = baseIndex + (groupDirection) * stepSize;
	uint indexHigh = baseIndex + (1-groupDirection) * stepSize;

	if(indexHigh >= N || indexLow >= N)
		return;

	indexLow *= elementSize;
	indexHigh *= elementSize;

	if (data[indexLow + keyOffset] > data[indexHigh + keyOffset]) {
		for (uint j = 0; j < elementSize; j++) {
			swap(data[indexLow + j], data[indexHigh + j]);
		}
	}
}

