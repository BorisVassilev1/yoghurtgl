layout(local_size_x = 20, local_size_y = 20) in;

#include <fluid.glsl>

layout(std430, binding = 1) volatile coherent restrict buffer ParticleBuffer {
	Particle particleData[];
};

uniform vec3 b_min;
uniform vec3 b_max;

uniform float deltaTime = 0;
uniform ivec2 _resolution;

void main() {
	uvec3 invID = gl_GlobalInvocationID;
	if(invID.x >= _resolution.x || invID.y >= _resolution.y) return;
	uint id = invID.x + int(_resolution.x) * invID.y;

	Particle p1 = particleData[id];

	p1.velocity += vec3(0.0, -9.81, 0.0) * deltaTime; // gravity
	//float t = time * 0.7;
	//p1.velocity += vec3(0, cos(t), sin(t)) * deltaTime * 5.0;

	p1.position += p1.velocity * deltaTime;
	p1.position = clamp(p1.position, b_min + vec3(0.2)*cellSize, b_max - vec3(0.2)*cellSize);

	particleData[id] = p1;
}
