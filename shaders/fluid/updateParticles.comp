layout(local_size_x = 20, local_size_y = 20) in;

#include <fluid.glsl>

layout(std430, binding = 1) volatile coherent restrict buffer ParticleBuffer {
	Particle particleData[];
};

uniform vec3 b_min;
uniform vec3 b_max;

uniform float deltaTime = 0;
uniform ivec2 resolution;

void main() {
	uvec3 invID = gl_GlobalInvocationID;
	if(invID.x >= resolution.x || invID.y >= resolution.y) return;
	uint id = invID.x + int(resolution.x) * invID.y;

	Particle p1 = particleData[id];

	//p1.velocity += vec3(0.0f, -9.81f, 0.0f) * deltaTime * 0.3;

	//if (p1.position.x < b_min.x || p1.position.x > b_max.x) {
	//	p1.velocity.x *= -0.5;
	//}
	//if (p1.position.y < b_min.y || p1.position.y > b_max.y){
	//	p1.velocity.y *= -0.5;
	//}
	//if (p1.position.z < b_min.z || p1.position.z > b_max.z) {
	//	p1.velocity.z *= -0.5;
	//}

	p1.position = clamp(p1.position, b_min + vec3(EPS), b_max - vec3(EPS));
	p1.position += p1.velocity * deltaTime;

	particleData[id] = p1;
}
