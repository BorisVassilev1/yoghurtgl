#include <pathTracing.glsl>

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(rgba32f, binding = 1) uniform image2D img_output;

// whether or not to account triangle geometry when tracing.
uniform bool do_trace_geometry = false;

uniform bool do_trace_spheres = true;

// maximum number of bounces for a ray
uniform int max_bounces;

// adds the current sample to the texture.
void write_sample(in ivec2 pixel_coords, in vec4 color) {
	vec4 current = imageLoad(img_output, pixel_coords);
	imageStore(img_output, pixel_coords, current + color);
}

void getBox(in uint i, out Box box) {
	vec3 min = vec3(
			uintBitsToFloat(primitives[i + 1]), 
			uintBitsToFloat(primitives[i + 2]), 
			uintBitsToFloat(primitives[i + 3]));
	uint matIdx = primitives[i + 4];
	vec3 max = vec3(
			uintBitsToFloat(primitives[i + 5]), 
			uintBitsToFloat(primitives[i + 6]), 
			uintBitsToFloat(primitives[i + 7]));
	box.min = min;
	box.matIdx = matIdx;
	box.max = max;
}

void getSphere(in uint i, out Sphere sph) {
	vec3 pos = vec3(
			uintBitsToFloat(primitives[i + 1]), 
			uintBitsToFloat(primitives[i + 2]), 
			uintBitsToFloat(primitives[i + 3]));
	float radius = uintBitsToFloat(primitives[i + 4]);
	uint matIdx = primitives[i + 5];
	sph.position = pos;
	sph.radius = radius;
	sph.matIdx = matIdx;
}

void getFastTriangle(uint i, out FastTriangle tri) {
	uvec3 indices = uvec3(
			primitives[i + 1] * 3, 
			primitives[i + 2] * 3,
			primitives[i + 3] * 3
			);
	tri.v0 = vec3( vertices[indices[0] + 0], vertices[indices[0] + 1], vertices[indices[0] + 2]);
	tri.v1 = vec3( vertices[indices[1] + 0], vertices[indices[1] + 1], vertices[indices[1] + 2]);
	tri.v2 = vec3( vertices[indices[2] + 0], vertices[indices[2] + 1], vertices[indices[2] + 2]);

	tri.v0 = (bvh_matrix * vec4(tri.v0, 1.0)).xyz;
	tri.v1 = (bvh_matrix * vec4(tri.v1, 1.0)).xyz;
	tri.v2 = (bvh_matrix * vec4(tri.v2, 1.0)).xyz;
}

void getTriangle(in uint i, out Triangle tri) {
	uvec3 indices = uvec3(
			primitives[i + 1] * 3, 
			primitives[i + 2] * 3,
			primitives[i + 3] * 3
			);
	tri.v0 = vec3( vertices[indices[0] + 0], vertices[indices[0] + 1], vertices[indices[0] + 2]);
	tri.v1 = vec3( vertices[indices[1] + 0], vertices[indices[1] + 1], vertices[indices[1] + 2]);
	tri.v2 = vec3( vertices[indices[2] + 0], vertices[indices[2] + 1], vertices[indices[2] + 2]);

	tri.normal0 = vec3( normals[indices[0] + 0], normals[indices[0] + 1], normals[indices[0] + 2]);
	tri.normal1 = vec3( normals[indices[1] + 0], normals[indices[1] + 1], normals[indices[1] + 2]);
	tri.normal2 = vec3( normals[indices[2] + 0], normals[indices[2] + 1], normals[indices[2] + 2]);

	tri.normal0 = (bvh_matrix * vec4(tri.normal0, 0.0)).xyz;
	tri.normal1 = (bvh_matrix * vec4(tri.normal1, 0.0)).xyz;
	tri.normal2 = (bvh_matrix * vec4(tri.normal2, 0.0)).xyz;

	tri.v0 = (bvh_matrix * vec4(tri.v0, 1.0)).xyz;
	tri.v1 = (bvh_matrix * vec4(tri.v1, 1.0)).xyz;
	tri.v2 = (bvh_matrix * vec4(tri.v2, 1.0)).xyz;
	
	uvec3 tci = uvec3(
			primitives[i + 1] * 2,
			primitives[i + 2] * 2,
			primitives[i + 3] * 2
			);

	tri.tc0 = vec2( texCoords[tci[0] + 0], texCoords[tci[0] + 1]);
	tri.tc1 = vec2( texCoords[tci[1] + 0], texCoords[tci[1] + 1]);
	tri.tc2 = vec2( texCoords[tci[2] + 0], texCoords[tci[2] + 1]);
	
	tri.t0 = vec3( tangents[indices[0] + 0], tangents[indices[0] + 1], tangents[indices[0] + 2]);
	tri.t1 = vec3( tangents[indices[1] + 0], tangents[indices[1] + 1], tangents[indices[1] + 2]);
	tri.t2 = vec3( tangents[indices[2] + 0], tangents[indices[2] + 1], tangents[indices[2] + 2]);

	tri.t0 = (bvh_matrix * vec4(tri.t0, 0.0)).xyz;
	tri.t1 = (bvh_matrix * vec4(tri.t1, 0.0)).xyz;
	tri.t2 = (bvh_matrix * vec4(tri.t2, 0.0)).xyz;

	tri.matIdx = primitives[i + 4];
}

// left child -> i + 1
// right child -> node.right
// parent -> node.parent
// right sibling -> node.parent->right
bool isLeaf(in BVHNode node) {
	return node.right == 0;
}

const uint FROM_PARENT = 0;
const uint FROM_SIBLING = 1;
const uint FROM_CHILD = 2;

void processLeaf(in Ray ray, in BVHNode node, inout RayHit hit) {
	uint offset = node.objOffset << 3;
	uint count = node.objCount;
	for(uint i = 0; i < count; ++ i) {
		uint current = offset + (i << 3);
		uint type = primitives[current];
		if(type == 2) {
			Box b;
			getBox(current, b);
			intersectBox(ray, b, current, hit);
		}
		if(type == 1) {
			Sphere sph;
			getSphere(current, sph);
			intersectSphere(ray, sph, current, hit);
		}
		if(type == 0) {
			FastTriangle tri;
			getFastTriangle(current, tri);
			intersectTriangle(ray, tri, current, hit);
		}
	}
}


void trace_bvh(in Ray ray, inout RayHit hit) {
	if(!intersectAABB(ray, nodes[0].min, nodes[0].max)) return;

	uint current = 1; // start from root's left child
	BVHNode node;
	uint state = FROM_PARENT;
	// possibly needed objects
	bool shouldBreak = false;
	int iterations = 0;

	while(!shouldBreak) {
		switch(state) {
			case FROM_CHILD: 
				uint parent = nodes[current].parent;
				if(current - parent == 1) {						// if current is left child
					current = nodes[parent].right;				// go to right sibling
					state = FROM_SIBLING;
				} else {										// if current is right child
					current = parent;							// go to parent
					state = FROM_CHILD;
				}
				break;
			case FROM_SIBLING:
				if(!intersectNode(ray, nodes[current])) {		// if no intersection
					current = nodes[current].parent;			// go to parent
					state = FROM_CHILD;
				} else if(isLeaf(nodes[current])) {				// if intersection with leaf
					processLeaf(ray, nodes[current], hit);		// process leaf
					current = nodes[current].parent;			// and go to parent
					state = FROM_CHILD;
				} else {										// if intersection and no leaf
					current = current + 1;						// go to left child
					state = FROM_PARENT;
				}
				break;
			case FROM_PARENT:
				if(!intersectNode(ray, nodes[current])) {		// if no intersection
					uint parent = nodes[current].parent;		// go to right sibling
					current = nodes[parent].right;
					state = FROM_SIBLING;
				} else if(isLeaf(nodes[current])) {				// if interseciton and leaf
					processLeaf(ray, nodes[current], hit);		// process leaf
					uint parent = nodes[current].parent;		// and go to right sibling
					current = nodes[parent].right;
					state = FROM_SIBLING;
				} else {										// if intersection and no leaf
					current = current + 1;						// go to left child
					state = FROM_PARENT;
				}
				break;
		}
		++iterations;
		shouldBreak = (current == 0 || iterations > 1000);
	}
}

// test for intersections with everything in the scene
void intersect_scene(in Ray ray, inout RayHit hit) {
	intersectGroundPlane(ray, -0.5, hit);

	trace_bvh(ray, hit);
}

vec3 lerp4vec(vec3 v00, vec3 v10, vec3 v01, vec3 v11, float x, float y) {
	return mix(mix(v00, v01, x), mix(v10, v11, x), y);
}

uniform float aperture	 = 0.0;
uniform float focus_dist = 3.1;

vec3 cam_pos = (cameraMatrix * vec4(0.0, 0.0, 0.0, 1.0)).xyz;

// TODO: fix depth of field effect!!!
void get_ray(out Ray ray, in vec3 cam_pos, in ivec2 pixel_coords, in vec2 pixel_position, uint random_seed) {
	vec2 ray_coords = vec2(pixel_position.x + (randomFloat(random_seed)) / resolution.x,
			pixel_position.y + (randomFloat(random_seed)) / resolution.y);

	ray_coords = ray_coords * 2. - 1.;

	vec3 ray_dir =
		normalize((vec4(ray_coords.x, ray_coords.y * aspect, -1 / tan(fov / 2) * aspect, 0.0) * cameraMatrix).xyz);

	ray = Ray(cam_pos, ray_dir);
}

void computeHitInfo(out HitInfo info, in RayHit hit, in Ray ray) {
	info.pos  = ray.origin + ray.direction * hit.dist;
	info.dist = hit.dist;
	if (hit.type == 0) return;
	if (hit.type == 1) {
		info.normal		 = vec3(0.0, 1.0, 0.0);
		info.texCoords	 = vec2(0.);
		float d			 = dot(ray.direction, info.normal);
		info.isFrontFace = step(d, 0.0);
		info.normal		 = (info.isFrontFace * 2.0 - 1.0) * info.normal;
		info.matIdx		 = 0;
		return;
	}
	if (hit.type == 2) {
		Sphere sphere;
		getSphere(hit.objIdx, sphere);

		info.normal		 = (info.pos - sphere.position.xyz) / sphere.radius;
		info.texCoords	 = vec2(0.);
		info.isFrontFace = step(dot(info.normal, ray.direction), 0.);
		info.normal		 = (info.isFrontFace * 2. - 1.) * info.normal;
		info.matIdx		 = sphere.matIdx;
		return;
	}
	if (hit.type == 3) {
		Triangle tri;
		getTriangle(hit.objIdx, tri);
		
		vec3 uvw = vec3((1. - hit.uv.x - hit.uv.y), hit.uv);

		info.normal		 = normalize(uvw.x * tri.normal0 + uvw.y * tri.normal1 + uvw.z * tri.normal2);
		info.texCoords	 = uvw.x * tri.tc0 + uvw.y * tri.tc1 + uvw.z * tri.tc2;

		mat3 vTBN0 = mat3(tri.t0, cross(tri.t0, tri.normal0), tri.normal0);
		mat3 vTBN1 = mat3(tri.t1, cross(tri.t1, tri.normal1), tri.normal1);
		mat3 vTBN2 = mat3(tri.t2, cross(tri.t2, tri.normal2), tri.normal2);
		mat3 vTBN = uvw.x * vTBN0 + uvw.y * vTBN1 + uvw.z * vTBN2;

		vec3 normal = texture(normalMap, info.texCoords).xyz;
		normal = normalize(normal * 2. - 1.);
		normal = normalize(mix(info.normal, vTBN * normal, materials[1].use_normal_map));
		
		info.isFrontFace = step(dot(info.normal, ray.direction), 0.);
		info.normal = normal;
		info.normal		 = (info.isFrontFace * 2. - 1.) * info.normal;

		info.matIdx		 = 1;
		return;
	}
	if (hit.type == 4) {
		Box box;
		getBox(hit.objIdx, box);

		vec3 diffmin = abs(info.pos - box.min);
		vec3 diffmax = abs(info.pos - box.max);

		info.normal = step(diffmax, vec3(phi)) - step(diffmin, vec3(phi));
		normalize(info.normal);
		info.texCoords	 = vec2(0.);

		info.isFrontFace = step(dot(info.normal, ray.direction), 0);
		info.normal		 = (float(info.isFrontFace) * 2. - 1.) * info.normal;

		info.matIdx = box.matIdx;
		return;
	}
}

uniform vec3 sun_direction = normalize(vec3( 4.1, 1.15, 3.));
uniform float sun_size = 0.01; // in radians on the sky
uniform float shadow_ray_chance = 0.0;
uniform float sun_intensity = 0;

void main() {
	vec4  pixel			 = vec4(0.0, 0.0, 0.0, 1.0);			// the pixel value
	ivec2 pixel_coords	 = ivec2(gl_GlobalInvocationID.xy);		// the pixel position of the current 'fragment'
	vec2  pixel_position = pixel_coords / resolution;			// pixel position mapped to [0, 1)

	// get the unique random seed for the pixel.
	uint random_seed_full = pixel_coords.x + pixel_coords.y * uint(resolution.x) + random_seed;
	// uint random_seed_full = random_seed;

	Ray	 ray;	  // the current ray being traced
	vec3 attenuation = vec3(1.);
	get_ray(ray, cam_pos, pixel_coords, pixel_position, random_seed_full);

	for (int i = 0; i < max_bounces; i++) {
		// initialize the hit object
		RayHit hit;
		hit.dist = FLOAT_MAX;
		hit.type = 0;

		// test intersections
		intersect_scene(ray, hit);

		// if hit the sky, write sky color and exit
		if (hit.type == 0) {
			pixel += vec4(get_sky_color(ray) * attenuation, 1.0f);
			float edge = cos(sun_size);
			pixel += vec4(
					vec3(step(
							edge, 
							//cos(sun_size * 1.0), 
							dot(sun_direction, ray.direction))
						) * attenuation * sun_intensity,
					1.0f);
			break;
		}

		HitInfo info;
		computeHitInfo(info, hit, ray);

		Material mat = materials[info.matIdx];
		
		vec3  base_diffuse	= texture(albedoMap, info.texCoords).xyz;
		float base_roughness = texture(roughnessMap, info.texCoords).y;
		vec3  base_emission	= texture(emissionMap, info.texCoords).xyz;
		float base_metallic	= texture(metallicMap, info.texCoords).z;

		vec3  albedo	= mix(mat.albedo, base_diffuse, mat.use_albedo_map);
		float metallic	= mix(mat.metallic, base_metallic, mat.use_metallic_map);
		vec3  emission	= mix(mat.emission, mat.emission * base_emission, mat.use_emission_map);
		float roughness = mix(mat.specular_roughness, mat.specular_roughness * base_roughness, mat.use_roughness_map) + 0.1;

		vec3 specular_color = mix(mat.specular_color, albedo, metallic);
		albedo = albedo * (1. - metallic);

		// do absorption if we are hitting from inside the object
		if (info.isFrontFace == 0.0f) { attenuation *= exp(-mat.transparency_color * info.dist); }

		// get the pre-fresnel chances
		float specularChance   = mat.specular_chance;
		float refractionChance = mat.refraction_chance;
		//float shadowChance = shadow_ray_chance; 
		float shadowChance = shadow_ray_chance;//* dot(sun_direction, info.normal);

		// take fresnel into account for specularChance and adjust other chances.
		// specular takes priority.
		// chanceMultiplier makes sure we keep diffuse / refraction ratio the same.
		float rayProbability = 1.0f;
		specularChance = fresnelReflectAmount(info.isFrontFace == 1.0f ? 1.0f : mat.ior,
				info.isFrontFace == 1.0f ? mat.ior : 1.0f, ray.direction, info.normal,
				mat.specular_chance, 1.0f);

		float chanceMultiplier = (1.0f - specularChance) / (1.0f - mat.specular_chance);
		refractionChance *= chanceMultiplier;
		shadowChance *= chanceMultiplier;

		// calculate whether we are going to do a diffuse, specular, or refractive ray
		float doSpecular	= 0.0f;
		float doRefraction	= 0.0f;
		float doShadow		= 0.0f;
		float raySelectRoll = randomFloat(random_seed_full);
		if (specularChance > 0.0f && raySelectRoll < specularChance) { // specular reflection
			doSpecular	   = 1.0f;
			rayProbability = specularChance;
		} else if (refractionChance > 0.0f && raySelectRoll < specularChance + refractionChance) { // refraction
			doRefraction   = 1.0f;
			rayProbability = refractionChance;
		} else if (shadowChance > 0.0f && raySelectRoll < specularChance + refractionChance + shadowChance) { // shadow ray
			doShadow = 1.0f;
			//rayProbability = sin(sun_size) * sun_size * 4 / PI;
			rayProbability = (1-cos(sun_size));
		} else { // lambertian disperse
			rayProbability = 1.0f - (specularChance + refractionChance);
		}

		// avoid numerical issues causing a divide by zero, or nearly so (more important later, when we add refraction)
		rayProbability = max(rayProbability, 0.001f);

		// Calculate a new ray direction.
		// Diffuse uses a normal oriented cosine weighted hemisphere sample.
		// Perfectly smooth specular uses the reflection ray.
		// Rough (glossy) specular lerps from the smooth specular to the rough diffuse by the material roughness squared
		// Squaring the roughness is just a convention to make roughness feel more linear perceptually.
		vec3 diffuseRayDir = cosWeightedHemissphereDir(info.normal, random_seed_full);
		float rayProbabilityIfDiffuse = rayProbability * dot(diffuseRayDir, info.normal) * 2. * PI;

		vec3 specularRayDir = reflect(ray.direction, info.normal);

		float specR = roughness * roughness;
		specR = specR * specR;

		specularRayDir = normalize(mix(specularRayDir, diffuseRayDir, specR));

		vec3 refractionRayDir = refract(ray.direction, info.normal, info.isFrontFace == 1.0 ? 1.0f / mat.ior : mat.ior);

		if(refractionRayDir == vec3(0.)) {
			refractionRayDir = vec3(1.0, 0.0, 0.0);
		}

		refractionRayDir =
			normalize(mix(refractionRayDir, -diffuseRayDir, mat.refraction_roughness * mat.refraction_roughness));

		vec3 shadowRayDir = normalize(sun_direction + 1. * sin(sun_size) * random_in_unit_sphere(random_seed_full));
		//vec3 shadowRayDir = normalize(sun_direction);

		ray.direction = mix(diffuseRayDir, specularRayDir, doSpecular);
		ray.direction = mix(ray.direction, refractionRayDir, doRefraction);
		ray.direction = mix(ray.direction, shadowRayDir, doShadow);

		rayProbability = mix(rayProbability, rayProbabilityIfDiffuse, 1. - doSpecular - doRefraction - doShadow);

		// emission
		pixel += vec4(emission * attenuation, 0);

		// update the colorMultiplier. refraction doesn't alter the color until we hit the next thing, so we can do
		// light absorption over distance.
		if (doRefraction == 0.0f) attenuation *= mix(albedo, specular_color, doSpecular);

		// update the ray position
		ray.origin = info.pos + ray.direction * phi;

		attenuation *= rayProbability;

		// Russian Roulette
		// As the throughput gets smaller, the ray is more likely to get terminated early.
		// Survivors have their value boosted to make up for fewer samples being in the average.
		{
			float p = max(attenuation.r, max(attenuation.g, attenuation.b));
			if (randomFloat(random_seed_full) > p * 2) { break; }

			// Add the energy we 'lose' by randomly terminating paths
			attenuation *= 1.0f / p;
		}
	}

	write_sample(pixel_coords, pixel);
}
